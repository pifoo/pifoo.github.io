<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[mac下Apache配置]]></title>
      <url>https://pifoo.github.io/2016/08/24/mac%E4%B8%8BApache%E9%85%8D%E7%BD%AE.html</url>
      <content type="html"><![CDATA[<h2 id="Apache配置"><a href="#Apache配置" class="headerlink" title="Apache配置"></a>Apache配置</h2><p>在OS X 10.11.5中是自带Apache软件的，我们只需要启动对应的服务就好了，以下命令是操作Apache时常用的几个命令：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">1、打开网络共享</div><div class="line">   打开&quot;系统偏好设置&quot;-&gt;&quot;共享&quot;，在&quot;互联网共享&quot;那一项前面打√。</div><div class="line"></div><div class="line"># which apachectl</div><div class="line">/usr/sbin/apachectl</div><div class="line"></div><div class="line"># 启动Apache服务</div><div class="line">sudo apachectl start</div><div class="line"></div><div class="line"># 重新启动Apache服务</div><div class="line">sudo apachectl restart</div><div class="line"></div><div class="line"># 关闭Apache服务</div><div class="line">sudo apachectl stop</div><div class="line"></div><div class="line"># 查看Apache的版本</div><div class="line">httpd -v</div></pre></td></tr></table></figure>
<p>在Macbook pro下，Apache的网站服务器根目录在/Library/WebServer/Documents 路径下在终端输入<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo cp /Library/WebServer/Documents/index.html.en /Library/WebServer/Documents/info.php</div></pre></td></tr></table></figure></p>
<p>即在Apache的根目录下复制index.html.en文件并重命名为info.php</p>
<h2 id="Laravel-Homestead"><a href="#Laravel-Homestead" class="headerlink" title="Laravel Homestead"></a>Laravel Homestead</h2><p><a href="https://laravel.com/docs/5.2/homestead" target="_blank" rel="external">https://laravel.com/docs/5.2/homestead</a></p>
<hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://my.oschina.net/joanfen/blog/171109" target="_blank" rel="external">http://my.oschina.net/joanfen/blog/171109</a>   √<br><a href="http://www.jellythink.com/archives/783" target="_blank" rel="external">http://www.jellythink.com/archives/783</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker使用指南-数据管理]]></title>
      <url>https://pifoo.github.io/2016/08/24/Docker%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86.html</url>
      <content type="html"><![CDATA[<h2 id="Docker-数据管理"><a href="#Docker-数据管理" class="headerlink" title="Docker 数据管理"></a>Docker 数据管理</h2><p> Docker 内部以及容器之间管理数据主要有两种方式：</p>
<ol>
<li>数据卷（Data volumes）</li>
<li>数据卷容器（Data volume containers）</li>
</ol>
<a id="more"></a>
<h3 id="1-数据卷（Data-volumes）"><a href="#1-数据卷（Data-volumes）" class="headerlink" title="1.  数据卷（Data volumes）"></a>1.  数据卷（Data volumes）</h3><p>数据卷是被设计用来持久化数据的，它的生命周期独立于容器，Docker不会在容器被删除后自动删除数据卷，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的数据卷;<br>数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>
<ul>
<li>数据卷可以在容器之间共享和重用</li>
<li>对数据卷的修改会立马生效</li>
<li>对数据卷的更新，不会影响镜像</li>
<li>数据卷默认会一直存在，即使容器被删除</li>
</ul>
<blockquote>
<p>注意：数据卷的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的数据卷。</p>
</blockquote>
<h4 id="1-1-创建一个数据卷"><a href="#1-1-创建一个数据卷" class="headerlink" title="1.1 创建一个数据卷"></a>1.1 创建一个数据卷</h4><p>在用 docker run命令的时候，使用 -v 标记来创建一个数据卷并挂载到容器里。在一次 run 中多次使用可以挂载多个数据卷<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// e.g  创建一个名为 web 的容器，并加载一个数据卷到容器的 /webapp目录</div><div class="line">$ sudo docker run -d -P --name web -v /webapp training/webapp python app.py</div><div class="line">*注意：也可以在 Dockerfile 中使用 VOLUME</div><div class="line"> 来添加一个或者多个新的卷到由该镜像创建的任意容器</div></pre></td></tr></table></figure></p>
<h4 id="1-2-删除数据卷"><a href="#1-2-删除数据卷" class="headerlink" title="1.2 删除数据卷"></a>1.2 删除数据卷</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// e.g  在删除容器的同时移除数据卷</div><div class="line">docker rm -v</div></pre></td></tr></table></figure>
<h4 id="1-3-挂载一个主机目录作为数据卷"><a href="#1-3-挂载一个主机目录作为数据卷" class="headerlink" title="1.3 挂载一个主机目录作为数据卷"></a>1.3 挂载一个主机目录作为数据卷</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// -v 标记也可以指定挂载一个本地主机的目录到容器中去</div><div class="line">// e.g  上面的命令加载主机的 /src/webapp 目录到容器的 /opt/webapp 目录</div><div class="line">// ro 加了表示挂载为只读</div><div class="line">$ docker run -d -P --name web -v /src/webapp:/opt/webapp:ro training/webapp python app.py</div></pre></td></tr></table></figure>
<h4 id="1-4-查看数据卷的具体信息"><a href="#1-4-查看数据卷的具体信息" class="headerlink" title="1.4  查看数据卷的具体信息"></a>1.4  查看数据卷的具体信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 查看指定容器的信息</div><div class="line">$ docker inspect web</div></pre></td></tr></table></figure>
<h3 id="2-数据卷容器（Data-volume-containers）"><a href="#2-数据卷容器（Data-volume-containers）" class="headerlink" title="2. 数据卷容器（Data volume containers）"></a>2. 数据卷容器（Data volume containers）</h3><h3 id="3-备份、恢复、迁移数据卷"><a href="#3-备份、恢复、迁移数据卷" class="headerlink" title="3.  备份、恢复、迁移数据卷"></a>3.  备份、恢复、迁移数据卷</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker使用指南-容器]]></title>
      <url>https://pifoo.github.io/2016/08/24/Docker%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-%E5%AE%B9%E5%99%A8.html</url>
      <content type="html"><![CDATA[<p><code>容器</code>是独立运行的一个或一组应用，以及它们的运行态环境.<br><code>虚拟机</code>可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用.</p>
<ul>
<li>应用容器<br>静态打包：把 应用程序 及其 运行时 打包为一个镜像；<br>动态运行：以一个应用容器的形式运行这个应用。</li>
<li>系统容器 ： LXC/LXD 和 OpenVZ （相当于一个轻量级虚拟机，目的是解除操作系统与底层的耦合）</li>
</ul>
<a id="more"></a>
<p>对最终用户而言，Docker提供的是一个标准化的交付方式；基于版本控制的方式去构建应用环境。推荐不同的项目运行不同的容器挂载不同的代码；可以  当作软件生命周期管理工具使用；<br>把应用跑起来只需要两样事情：一个64位的linux内核<br>一个打包正确的docker镜像地址，或者Dockerfile<br>这样，用户，不管是大企业还是普通想在服务端跑程序的人，只需要这2者就完了。不用去操心一堆的数据库、消息队列、中间件、jvm参数、等等等的所有麻烦的事情</p>
<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>启动容器有两种方式</p>
<ol>
<li>一种是基于镜像新建一个容器并启动</li>
<li>另外一个是将在终止状态（stopped）的容器重新启动。</li>
</ol>
<h3 id="1-新建并启动"><a href="#1-新建并启动" class="headerlink" title="1. 新建并启动"></a>1. 新建并启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// e.g  下面的命令输出一个 “Hello World”，之后终止容器</div><div class="line">➜  ~ docker run ubuntu:14.04 /bin/echo &apos;Hello world&apos;</div><div class="line">Hello world</div><div class="line"></div><div class="line">// e.g  下面的命令则启动一个 bash 终端，允许用户进行交互</div><div class="line">// -t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上</div><div class="line">// -i 则让容器的标准输入保持打开</div><div class="line">➜  ~ docker run -t -i ubuntu:14.04 /bin/bash</div><div class="line">root@01b6b7d32eae:/#</div></pre></td></tr></table></figure>
<p>当利用 docker run来创建容器时，Docker 在后台运行的标准操作包括：</p>
<ul>
<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>
<li>利用镜像创建并启动一个容器</li>
<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>
<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>
<li>从地址池配置一个 ip 地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被终止</li>
</ul>
<h3 id="2-启动已终止容器"><a href="#2-启动已终止容器" class="headerlink" title="2.  启动已终止容器"></a>2.  启动已终止容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker start &lt;容器ID&gt;</div><div class="line">docker start &lt;镜像ID&gt;</div><div class="line"># 连接到终端上</div><div class="line">docker attach &lt;容器ID&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker使用指南-镜像]]></title>
      <url>https://pifoo.github.io/2016/08/24/Docker%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-%E9%95%9C%E5%83%8F.html</url>
      <content type="html"><![CDATA[<p>Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术;容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。</p>
<a id="more"></a>
<p>Docker 包括三个基本概念：</p>
<ul>
<li>仓库（Repository）<br><em>仓库（Repository）是集中存放镜像文件的场所。</em>（可以联想git仓库）。<br>公用（Public）仓库有Docker Hub，它由Docker公司维护，提供官方维护版本的镜像，供用户下载使用。用户也可以在本地网络或VPS内创建一个私有（Private）仓库。镜像可以通过push上传到仓库，也可以通过pull下载到本地。<br>任何人可从<code>Docker Hub仓库</code>下载<code>镜像</code>基于镜像运行<code>容器</code>;<br>有时候会把仓库和仓库注册服务器（Registry）混为一谈，并不严格区分。实际上，仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。<br>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。<br>最大的公开仓库是 <a href="https://hub.docker.com/" target="_blank" rel="external">Docker Hub</a>，存放了数量庞大的镜像供用户下载。<br>国内的公开仓库包括 <a href="https://hub.tenxcloud.com/" target="_blank" rel="external">时速云</a> 、<a href="https://c.163.com/hub" target="_blank" rel="external">网易云</a> 等，可以提供大陆用户更稳定快速的访问。<br>当然，用户也可以在本地网络内创建一个私有仓库（参考本文“私有仓库”部分）。<br>当用户创建了自己的镜像之后就可以使用 push命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上 pull<br>下来就可以了。<br>*注：Docker 仓库的概念跟 <a href="http://git-scm.com/" target="_blank" rel="external">Git</a> 类似，注册服务器可以理解为 GitHub 这样的托管服务。</li>
</ul>
<ul>
<li><p>镜像（Image）           <code>docker images 列出镜像</code><br><em>Docker 镜像（Image）就是一个只读的模板;</em><br>镜像是一个只读的模板，包含的特定的环境。比如可以包含一个完整的ubuntu环境，或者只有一个nginx服务器。<br>镜像可以用来创建 Docker 容器。<br>Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用;<br>Docker 运行容器前需要本地存在对应的镜像，如果镜像不存在本地，Docker 会从镜像仓库下载（默认是 Docker Hub 公共注册服务器中的仓库）</p>
</li>
<li><p>容器（Container）    <code>docker ps 列出容器</code><br> <em>容器是从镜像创建的运行实例;</em>（本质上是在镜像上加了一层可写层来保存变更）。<br>它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。<br>docker容器可以理解为在沙盒中运行的进程。这个沙盒包含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等；<br>可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。<br><em>注：镜像是只读的，容器在启动的时候创建一层可写层作为最上层(</em>每运行一个容器，会在镜像上加一个可写层，但这一层并不会改变镜像本身<strong>，这也就是为什么，有时候你如果用同一个镜像，启动多个容器，里面的内容是不会变的。如果你要将可写层持久化，就要通过 commit命令来把这个可写层写到磁盘上，即生成新的镜像*</strong>)<br>Docker的Volume机制可以挂载宿主机器的文件系统</p>
</li>
<li><p>镜像库（repository）<br>镜像库包含了某一类镜像的所有版本。只包含库名的repository为官方顶层镜像库，如ubuntu，而包含用户名和库名的repository为用户镜像库，如 binss/ubuntu。镜像库的镜像以标签（Tag）进行区分。一个仓库包含了N个镜像库，如ubuntu、nginx、mysql。</p>
</li>
</ul>
<blockquote>
<p>Docker使用流程通常是这样的：<br>获取镜像-&gt;使用镜像创建容器-&gt;使用容器<br>参考 <a href="http://www.binss.me/blog/learn-docker-with-me-about-commands/" target="_blank" rel="external">获取镜像-&gt;使用镜像创建容器-&gt;使用容器</a></p>
</blockquote>
<h2 id="1-镜像"><a href="#1-镜像" class="headerlink" title="1. 镜像"></a>1. 镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line">基本命令</div><div class="line"></div><div class="line">➜  ~ docker info // 检查docker是否已安装</div><div class="line">➜  ~ docker version</div><div class="line">Client:</div><div class="line"> Version:      1.11.2</div><div class="line"> API version:  1.23</div><div class="line"> Go version:   go1.5.4</div><div class="line"> Git commit:   b9f10c9</div><div class="line"> Built:        Wed Jun  1 21:20:08 2016</div><div class="line"> OS/Arch:      darwin/amd64</div><div class="line">Server:</div><div class="line"> Version:      1.11.2</div><div class="line"> API version:  1.23</div><div class="line"> Go version:   go1.5.4</div><div class="line"> Git commit:   b9f10c9</div><div class="line"> Built:        Wed Jun  1 21:20:08 2016</div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"></div><div class="line"></div><div class="line">➜  ~ docker images                            // 列出本地主机镜像</div><div class="line">➜  ~ docker ps                                // 查看运行中的容器</div><div class="line">➜  ~ docker inspect `容器ID`                   // 查看详细信息</div><div class="line">➜  ~ docker ps -a                             // 查看所有的容器列表</div><div class="line">➜  ~ docker ps -l                             // 显示最近一个容器</div><div class="line">➜  ~ docker rm `容器ID`                        // 删除指定容器</div><div class="line">➜  ~ docker rmi `镜像ID`                       // 删除指定空镜像(有容器依赖则先删除删除容器)，</div><div class="line"></div><div class="line">// Docker通过docer search、pull、login 和 push 等命令提供了连接Docker Hub服务的功能</div><div class="line">➜  ~ docker search &lt;镜像源&gt;              // 搜索镜像</div><div class="line">➜  ~ docker pull &lt;镜像源&gt;               // 拉取镜像</div><div class="line">➜  ~ docker login                        // 登陆docker hub</div><div class="line">➜  ~ docker push  yourname/newimage      // 推送镜像到Docker Hub</div><div class="line"></div><div class="line">// e.g 在Docker中运行一个web应用</div><div class="line">➜  ~ docker run -d -P training/webapp python app.py</div><div class="line"></div><div class="line">// e.g  从 Docker Hub 仓库下载一个 Ubuntu 14.04 操作系统的镜像</div><div class="line">➜  ~ docker pull ubuntu:14.04</div><div class="line">// 使用该镜像创建一个容器，并在其中运行 bash 应用</div><div class="line">➜  ~ docker run -t -i ubuntu:14.04 /bin/bash </div><div class="line">root@a8d2324f5d71:/# （exit 退出）</div><div class="line">➜  ~ docker images        // 列出本地镜像</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">hello-world         latest              693bce725149        2 weeks ago         967 B</div><div class="line">nginx               latest              0d409d33b27e        3 weeks ago         182.8 MB</div><div class="line">ubuntu              14.04               8f1bd21bd25c        3 weeks ago         188 MB</div><div class="line">training/webapp     latest              6fae60ef3446        13 months ago       348.8 MB </div><div class="line"></div><div class="line"></div><div class="line">// e.g 修改已有镜像</div><div class="line">➜  ~ docker run -t -i 8f1bd21bd25c /bin/bash   // 通过已存在的镜像启动容器</div><div class="line">root@b9b904b185be:/# sudo apt-get update       // 修改了镜像</div><div class="line">// 容器已经被改变，使用 docker commit命令来提交更新后的副本</div><div class="line">➜  ~ docker commit -m &quot;update apt-get&quot; -a &quot;Docker Newbee&quot; b9b904b185be ununtu/14.04:v2</div><div class="line">sha256:137b614e064c78c11e6653ac1dfa07606ff2e272b12aac7bae1643bfcd86aa11</div><div class="line">// -m  来指定提交的说明信息</div><div class="line">// -a 指定更新的用户信息</div><div class="line">// b9b904b185be  用来创建镜像的容器ID</div><div class="line">// 最后指定目标镜像的仓库名和 tag 信息。创建成功后会返回这个镜像的 ID 信息</div><div class="line">➜  ~ docker images            // 查看新创建的镜像</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">ununtu/14.04        v2                  137b614e064c        56 seconds ago      231.4 MB</div><div class="line">hello-world         latest              693bce725149        2 weeks ago         967 B</div><div class="line">nginx               latest              0d409d33b27e        3 weeks ago         182.8 MB</div><div class="line">ubuntu              14.04               8f1bd21bd25c        3 weeks ago         188 MB</div><div class="line">training/webapp     latest              6fae60ef3446        13 months ago       348.8 MB</div><div class="line"></div><div class="line">// 通过新创建的镜像启动容器</div><div class="line">➜  ~ docker run -t -i ununtu/14.04:v2 /bin/bash</div><div class="line">root@dfe75b1392e0:/# </div><div class="line"></div><div class="line"></div><div class="line">// e.g 利用 Dockerfile 来创建镜像</div><div class="line">// docker commit 来扩展一个镜像比较简单，但是不方便在一个团队中分享</div><div class="line">// 使用 docker build来创建一个新的镜像。为此，首先需要创建一个 Dockerfile，包含一些如何创建镜像的指令</div><div class="line">// 新建一个目录和一个 Dockerfile</div><div class="line">➜  ~ mkcd sinatra &amp;&amp; touch Dockerfile</div><div class="line">// Dockerfile 中每一条指令都创建镜像的一层，例如：</div><div class="line"># This is a comment                             // # 注释</div><div class="line">FROM ununtu/14.04:v2                          // FROM指令告诉 Docker 使用哪个镜像作为基础</div><div class="line">MAINTAINER Docker pifoo &lt;pifoo@icloud.com&gt;  // 维护者的信息</div><div class="line">RUN apt-get -qq update          // RUN开头的指令会在创建中运行</div><div class="line">RUN apt-get -qqy install ruby ruby-dev</div><div class="line">RUN gem install sinatra</div><div class="line"></div><div class="line">// 编写完成 Dockerfile 后可以使用 docker build来生成镜像</div><div class="line">// -t 标记来添加 tag，指定新的镜像的用户信息。 “.” 是 Dockerfile 所在的路径（当前目录），也可以替换为一个具体的 Dockerfile 的路径</div><div class="line">➜  sinatra docker build -t=&quot;ununtu/14.04:v3&quot; .</div><div class="line">Sending build context to Docker daemon 2.048 kB</div><div class="line">Step 1 : FROM ununtu/14.04:v2</div><div class="line"> ---&gt; 137b614e064c</div><div class="line">Step 2 : MAINTAINER Docker pifoo &lt;pifoo@icloud.com&gt;</div><div class="line"> ---&gt; Using cache</div><div class="line"> ---&gt; 4ccd8ed7c097</div><div class="line">Step 3 : RUN apt-get -qq update</div><div class="line"> ---&gt; Using cache</div><div class="line"> ---&gt; e38d06a512f1</div><div class="line">Successfully built e38d06a512f1</div><div class="line">/*  可以看到 build 进程在执行操作。它要做的第一件事情就是上传这个 Dockerfile 内容，因为所有的操作都要依据 Dockerfile 来进行。 然后，Dockfile 中的指令被一条一条的执行。每一步都创建了一个新的容器，在容器中执行指令并提交修改（就跟之前介绍过的 docker commit</div><div class="line"> 一样）。当所有的指令都执行完毕之后，返回了最终的镜像 id。所有的中间步骤所产生的容器都被删除和清理了。</div><div class="line">*注意一个镜像不能超过 127 层</div><div class="line">  此外，还可以利用 ADD</div><div class="line"> 命令复制本地文件到镜像；用 EXPOSE</div><div class="line"> 命令来向外部开放端口；用 CMD命令来描述容器启动后运行的程序等。*/</div><div class="line">例如</div><div class="line"># put my local web site in myApp folder to /var/www</div><div class="line">ADD myApp /var/www</div><div class="line"># expose httpd port</div><div class="line">EXPOSE 80</div><div class="line"># the command to run</div><div class="line">CMD [&quot;/usr/sbin/apachectl&quot;, &quot;-D&quot;, &quot;FOREGROUND&quot;]</div><div class="line"></div><div class="line">➜  ~ docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">ununtu/14.04        v3                  e38d06a512f1        3 minutes ago       253.2 MB</div><div class="line">ununtu/14.04        v2                  137b614e064c        32 minutes ago      231.4 MB</div><div class="line">hello-world         latest              693bce725149        2 weeks ago         967 B</div><div class="line">nginx               latest              0d409d33b27e        3 weeks ago         182.8 MB</div><div class="line">ubuntu              14.04               8f1bd21bd25c        3 weeks ago         188 MB</div><div class="line">training/webapp     latest              6fae60ef3446        13 months ago       348.8 MB</div><div class="line">// 通过新创建的镜像启动容器</div><div class="line">➜  ~ docker run -t -i ununtu/14.04:v3 /bin/bash</div><div class="line">root@9f8c1bab0ad2:/#</div><div class="line"></div><div class="line"></div><div class="line">// docker tag  命令修改镜像的标签</div><div class="line">➜  ~ docker tag 8f1bd21bd25c ununtu/14.04:v1      </div><div class="line">➜  ~ docker images                             </div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">ununtu/14.04        v3                  e38d06a512f1        7 minutes ago       253.2 MB</div><div class="line">ununtu/14.04        v2                  137b614e064c        35 minutes ago      231.4 MB</div><div class="line">hello-world         latest              693bce725149        2 weeks ago         967 B</div><div class="line">nginx               latest              0d409d33b27e        3 weeks ago         182.8 MB</div><div class="line">ubuntu              14.04               8f1bd21bd25c        3 weeks ago         188 MB</div><div class="line">ununtu/14.04        v1                  8f1bd21bd25c        3 weeks ago         188 MB</div><div class="line">training/webapp     latest              6fae60ef3446        13 months ago       348.8 MB</div><div class="line">➜  ~ docker images ununtu/14.04</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">ununtu/14.04        v3                  e38d06a512f1        11 minutes ago      253.2 MB</div><div class="line">ununtu/14.04        v2                  137b614e064c        39 minutes ago      231.4 MB</div><div class="line">ununtu/14.04        v1                  8f1bd21bd25c        3 weeks ago         188 MB</div><div class="line">➜  ~ docker images ununtu/14.04:v1</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">ununtu/14.04        v1                  8f1bd21bd25c        3 weeks ago         188 MB</div><div class="line"></div><div class="line">// 从本地文件系统导入一个镜像</div><div class="line">➜  ~ cat ubuntu-14.04-x86_64-minimal.tar.gz  |docker import - ubuntu:14.04</div><div class="line"></div><div class="line">// 上传镜像</div><div class="line">docker push ouruser/sinatra</div><div class="line"></div><div class="line"></div><div class="line">// 存出和载入镜像</div><div class="line">// e.g 存出镜像</div><div class="line">如果要导出镜像到本地文件，可以使用 docker save命令。</div><div class="line">➜  ~ docker images</div><div class="line">➜  ~ docker save -o ubuntu_14.04.tar ubuntu:14.04</div><div class="line">// e.g 载入镜像</div><div class="line">➜  ~ docker load &lt; ubuntu_14.04.tar  // 这将导入镜像以及其相关的元数据信息（包括标签等）</div><div class="line"></div><div class="line">// e.g 移除本地(空)镜像</div><div class="line">➜  ~ docker rmi training/sinatra</div><div class="line">// 清理所有未打过标签的本地镜像</div><div class="line">➜  ~ docker rmi $(docker images -q -f &quot;dangling=true&quot;)</div><div class="line">// -q 和 -f 是缩写, 完整的命令其实可以写着下面这样:</div><div class="line">➜  ~  sudo docker rmi $(docker images --quiet --filter &quot;dangling=true&quot;)</div></pre></td></tr></table></figure>
<hr>
<p>参考：<br><a href="https://www.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="external">Docker —— 从入门到实践</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac OS X 安装 Docker 及 入门]]></title>
      <url>https://pifoo.github.io/2016/08/24/Mac-OS-X-%E5%AE%89%E8%A3%85-Docker-%E5%8F%8A-%E5%85%A5%E9%97%A8.html</url>
      <content type="html"><![CDATA[<h2 id="1、安装（macOS环境）"><a href="#1、安装（macOS环境）" class="headerlink" title="1、安装（macOS环境）"></a>1、安装（macOS环境）</h2><h3 id="1-1-官网下载-Docker-Toolbox-来安装-Docker"><a href="#1-1-官网下载-Docker-Toolbox-来安装-Docker" class="headerlink" title="1.1 官网下载 Docker Toolbox 来安装 Docker"></a>1.1 官网下载 <a href="https://www.docker.com/toolbox" target="_blank" rel="external">Docker Toolbox</a> 来安装 <a href="https://www.docker.com" target="_blank" rel="external">Docker</a></h3><p>Docker Toolbox 提供了以下工具：</p>
<blockquote>
<p>1.2 用于运行 docker-machine 二进制文件的 Docker Machine<br>  1.2 用于运行 docker 二进行文件的 Docker Engine<br>  1.3 用于运行 docker-compose 二进行文件的 Docker Compose (Mac 特有)<br>  1.4 Kitematic，Docker 的图形用户界面<br>  1.5 用于 Docker 命令行环且预先配置好的 shell<br>  1.6 Oracle VM VirtualBox</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Docker = LXC + Docker Image（APPS）</div><div class="line">Hyper = Hypervisor + Docker Image</div><div class="line">Vagrant: dev -&gt; QA</div><div class="line">Docker: CI/CD-&gt; deploy</div></pre></td></tr></table></figure>
<p>其共享宿主机内核<br><img src="http://upload-images.jianshu.io/upload_images/43373-c7abd92b5b6cf940.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Image的分层叠加"></p>
<ul>
<li>Docker 的后台程序使用了 Linux 特有的内核特性，所以不能直接在 OS X 上运行 Docker;<br>必须使用 docker-machine来创建并附加一台虚拟机（VM）</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-797c85dfdf91fe68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VM vs Docker"><br>vm与docker框架，直观上来讲<strong>vm多了一层guest OS，同时Hypervisor会对硬件资源进行虚拟化，docker直接使用硬件资源</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-50c47afd1b55d6b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Docker应用场景:
持续集成和持续交付
开发运维一体化
容器云
大数据"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-d476fae11eb93003.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="架构"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-48861cce763b0694.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运作流程"></p>
<h3 id="1-2-运行-Docker-Container"><a href="#1-2-运行-Docker-Container" class="headerlink" title="1.2 运行 Docker Container"></a>1.2 运行 Docker Container</h3><h4 id="想要运行一个-Docker-容器，需要做如下内容："><a href="#想要运行一个-Docker-容器，需要做如下内容：" class="headerlink" title="想要运行一个 Docker 容器，需要做如下内容："></a>想要运行一个 Docker 容器，需要做如下内容：</h4><ul>
<li>创建一个新的（或开启一台已存在的）Docker 虚拟机</li>
<li>从您当前的环境切换到新的虚拟机的环境中</li>
<li>利用 docker客户端创建，加载并管理 container</li>
</ul>
<h4 id="两种使用-Docker-Toolbox-的方法："><a href="#两种使用-Docker-Toolbox-的方法：" class="headerlink" title="两种使用 Docker Toolbox 的方法："></a>两种使用 Docker Toolbox 的方法：</h4><ul>
<li><p>使用 Docker 的快速入门终端<br><img src="http://upload-images.jianshu.io/upload_images/43373-b2b1da9452c32074.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run hello-world // 查看是否安装成功</div></pre></td></tr></table></figure>
</li>
<li><p>使用 shell 环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ docker-machine create --driver virtualbox default  // 创建一个新的 Docker 虚拟机</div><div class="line">// 用 docker-machine命令来开启，停止，查询并管理虚拟机</div><div class="line">// 该命令还会在 ~/.docker/machine/machines/default目录下生成一个 docker machine 的配置文件。</div><div class="line">$ docker-machine ls        // 列出所有可用的 docker machine（docker 实例）</div><div class="line">$ docker-machine env default   // 获取 default虚拟机的环境变量</div><div class="line">$ eval &quot;$(docker-machine env default)&quot;  // 连接到 default虚拟机</div><div class="line">$ docker run hello-world // 运行 hello-world container 来验证您的安装是否已经成功</div><div class="line">$ docker-machine rm &lt;machine-name&gt;  // 删除某虚拟机</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-Docker-使用"><a href="#2-Docker-使用" class="headerlink" title="2. Docker 使用"></a>2. Docker 使用</h2><h3 id="2-1-访问-container-的端口"><a href="#2-1-访问-container-的端口" class="headerlink" title="2.1  访问 container 的端口"></a>2.1  访问 container 的端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run -d -P --name web nginx      // 在 DOCKER_HOST 上开启一个NGINX container</div></pre></td></tr></table></figure>
<blockquote>
<p>一般来说，docker run 命令会开启一个 container，并运行它，最后关闭它;<br>-d 参数: 在后台运行<br>-P 参数: 可以将 container 监听的那个端口告知给 Docker Host；这样就可以在 Mac 机上访问 container 了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ docker ps     // 查看运行的 container</div><div class="line">$ docker port web  // 查看 container 的端口</div><div class="line">443/tcp -&gt; 0.0.0.0:32768</div><div class="line">80/tcp -&gt; 0.0.0.0:32769</div><div class="line">// 该命令显示出的内容会告诉你 webcontainer 的 80端口已经映射到了 Docker Host 上的 49157端口上</div></pre></td></tr></table></figure>
<p>此时在浏览器中运行 <a href="http://localhost:32769/" target="_blank" rel="external">http://localhost:32769/</a> 并没有生效,其原因就是 DOCKER_HOST的地址并不是本地的机器的地址（0.0.0.0），而是的 Docker 虚拟机的地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker-machine ip default  // 获取 Docker 虚拟机（即 default）的地址</div><div class="line">192.168.99.100</div></pre></td></tr></table></figure></p>
<p>访问  <a href="http://192.168.99.100:32769/" target="_blank" rel="external">http://192.168.99.100:32769/</a><br><img src="http://upload-images.jianshu.io/upload_images/43373-f6b79acf169add3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="welcome to nginx"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 停止并删除正在运行的 nginx container </div><div class="line">$ docker stop web</div><div class="line">$ docker rm web</div></pre></td></tr></table></figure>
<h2 id="3-为容器挂载一个卷"><a href="#3-为容器挂载一个卷" class="headerlink" title="3. 为容器挂载一个卷"></a>3. 为容器挂载一个卷</h2><p>开启一个 container 的时候，系统会自动将本机中的 /Users/username目录共享给 Docker 虚拟机。通过本次共享，可以将该目录挂载到 container 上。</p>
<p>下面的内容将会介绍如何做到这些：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// 1. 跳转到您的用户 $HOME目录下。</div><div class="line">$ cd $HOME</div><div class="line"></div><div class="line">// 2. 创建一个新的 dockerSite目录。</div><div class="line">$ mkdir dockerSite</div><div class="line"></div><div class="line">// 3. 跳转到 dockerSite目录中。</div><div class="line">$ cd dockerSite</div><div class="line"></div><div class="line">// 4. 创建一个新的 index.html文件。</div><div class="line">$ echo &quot;my new site&quot; &gt; index.html</div><div class="line"></div><div class="line">// 5. 开启一个新 nginx container 并将 html目录替换为 dockerSite目录(并命名为 mysite)。</div><div class="line">$ docker run -d -P -v $HOME/dockerSite:/usr/share/nginx/html --name mysite nginx</div><div class="line"></div><div class="line">// 6. 获取到 mysite这个 container 的端口。</div><div class="line">$ docker port mysite</div><div class="line">443/tcp -&gt; 0.0.0.0:32770</div><div class="line">80/tcp -&gt; 0.0.0.0:32771</div><div class="line"></div><div class="line">➜  7. dockerSite docker-machine ip default</div><div class="line">192.168.99.100</div></pre></td></tr></table></figure></p>
<p>访问 <a href="http://192.168.99.100:32771/" target="_blank" rel="external">http://192.168.99.100:32771/</a><br><img src="http://upload-images.jianshu.io/upload_images/43373-1f1219e628cc11de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 8. 立即添加一个文件到 $HOME/siet目录下</div><div class="line">$ echo &quot;This is cool&quot; &gt; cool.html</div></pre></td></tr></table></figure>
<p>访问 <a href="http://192.168.99.100:32771/cool.html" target="_blank" rel="external">http://192.168.99.100:32771/cool.html</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 9. 停止然后删除正在运行的 mysitecontainer。</div><div class="line">$ docker stop mysite$ docker rm mysite</div><div class="line"></div><div class="line">docker ps -a   // 查看容器</div><div class="line">docker images  // 列出镜像</div><div class="line"></div><div class="line">docker rm  容器ID    // 删除容器</div><div class="line">docker rmi  镜像ID   // 删除镜像</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">➜  ~ docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">hello-world         latest              693bce725149        2 weeks ago         967 B</div><div class="line">nginx               latest              0d409d33b27e        2 weeks ago         182.8 MB</div><div class="line">training/webapp     latest              6fae60ef3446        13 months ago       348.8 MB</div><div class="line">// 用已存在的镜像启动pwkk</div><div class="line">➜  ~ docker run -t -i 0d409d33b27e /bin/bash                                               </div><div class="line">root@3db4c31437e4:/# nginx -v</div><div class="line">nginx version: nginx/1.11.1</div><div class="line">root@3db4c31437e4:/#</div></pre></td></tr></table></figure>
<h2 id="4-更新、卸载Docker-Toolbox"><a href="#4-更新、卸载Docker-Toolbox" class="headerlink" title="4. 更新、卸载Docker Toolbox"></a>4. 更新、卸载Docker Toolbox</h2><h3 id="4-1-更新-Docker-Toolbox"><a href="#4-1-更新-Docker-Toolbox" class="headerlink" title="4.1 更新 Docker Toolbox"></a>4.1 更新 Docker Toolbox</h3><p>为更新Docker Toolbox, 需要下载并重新运行<a href="https://docker.com/toolbox/" target="_blank" rel="external">Docker Toolbox安装器</a></p>
<h3 id="4-2-卸载-Docker-Toolbox"><a href="#4-2-卸载-Docker-Toolbox" class="headerlink" title="4.2 卸载 Docker Toolbox"></a>4.2 卸载 Docker Toolbox</h3><p>按照以下步骤卸载Toolbox：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 1. 列出所有的虚拟机</div><div class="line">$ docker-machine ls</div><div class="line"></div><div class="line">// 2. 删除（列出的）每一台虚拟机.(删除一台虚拟机，意味着从VirtualBox和~/.docker/machine/machines目录中同时删除虚拟机文件)</div><div class="line">$ docker-machine rm dev</div><div class="line"></div><div class="line">// 3. 从“应用程序“文件夹中删除Docker快捷终端（Quickstart Terminal）和Kitematic.</div><div class="line"></div><div class="line">// 4. 从/usr/local/bin文件夹中删除docker, docker-compose和 docker-machine命令文件.</div><div class="line">$ rm /usr/local/bin/docker</div><div class="line"></div><div class="line">// 5. 从系统中删除 ~/.docker文件夹.</div></pre></td></tr></table></figure></p>
<h2 id="5-学习更多"><a href="#5-学习更多" class="headerlink" title="5. 学习更多"></a>5. 学习更多</h2><p>使用”docker-machine help”命令可以列出关于Docker Machine的全部命令行参考信息.参照<a href="https://docs.docker.com/machine/" target="_blank" rel="external">Docker Machine文档</a>来获得关于如何使用 SSH 或者 SCP 访问虚拟机的信息。 接下来，可以继续了解<a href="https://docs.docker.com/userguide" target="_blank" rel="external">Docker用户手册</a> . 如果对使用Kitematic图形界面工具感兴趣，可以参考阅读 <a href="https://docs.docker.com/kitematic/userguide/" target="_blank" rel="external">Kitermatic用户手册</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<p><a href="http://docker.widuu.com/index.html" target="_blank" rel="external">http://docker.widuu.com/index.html</a><br><a href="http://www.docker.org.cn/" target="_blank" rel="external">http://www.docker.org.cn/</a><br><a href="https://www.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="external">Docker —— 从入门到实践</a><br><a href="http://dockone.io/article/1570" target="_blank" rel="external">深入理解虚拟机、容器和Hyper技术</a><br><a href="http://dockone.io/article/1445" target="_blank" rel="external">http://dockone.io/article/1445</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac下mysql环境配置]]></title>
      <url>https://pifoo.github.io/2016/08/24/mac%E4%B8%8Bmysql%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</url>
      <content type="html"><![CDATA[<h2 id="1-数据库安装"><a href="#1-数据库安装" class="headerlink" title="1. 数据库安装"></a>1. 数据库安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">→ brew install mysql  </div><div class="line">→ brew info mysql</div><div class="line">// ?→ mysql_secure_installation</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2-运行mysql"><a href="#2-运行mysql" class="headerlink" title="2. 运行mysql"></a>2. 运行mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// → brew services start mysql    // 可以在后台运行</div><div class="line">→ rm /private/tmp/mysql.sock.lock    </div><div class="line">→ mv /private/tmp/mysql.sock.lock ~/del-rm</div><div class="line">→ mysql.server start | stop | restart   //**...........</div></pre></td></tr></table></figure>
<h2 id="3-登陆-mysql"><a href="#3-登陆-mysql" class="headerlink" title="3. 登陆 mysql"></a>3. 登陆 mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//→ brew services list</div><div class="line">→ mysql -uroot -p         # 登陆mysql服务器</div><div class="line">→ mysql&gt; SHOW DATABASES;  # 显示数据库列表</div><div class="line">+--------------------+</div><div class="line">| Database           |</div><div class="line">+--------------------+</div><div class="line">| information_schema |</div><div class="line">| laravel5_db        |</div><div class="line">| mysql              |</div><div class="line">| performance_schema |</div><div class="line">| sys                |</div><div class="line">| test               |</div><div class="line">+--------------------+</div></pre></td></tr></table></figure>
<h2 id="4-Mysql安装后为空密码，设置新密码"><a href="#4-Mysql安装后为空密码，设置新密码" class="headerlink" title="4. Mysql安装后为空密码，设置新密码"></a>4. Mysql安装后为空密码，设置新密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">→ mysqladmin -u root password &quot;new_password&quot;</div><div class="line">→ mysql -u root -p      // 连接到mysql服务器</div></pre></td></tr></table></figure>
<blockquote>
<h5 id="注-数据库连接，须正确配置my-cnf，socket正确指向mysql-sock"><a href="#注-数据库连接，须正确配置my-cnf，socket正确指向mysql-sock" class="headerlink" title="注:  数据库连接，须正确配置my.cnf，socket正确指向mysql.sock"></a>注:  数据库连接，须正确配置my.cnf，socket正确指向mysql.sock</h5><p>→ sudo find / -name mysql.sock<br>→ touch /usr/local/etc/my.cnf<br>[client]<br>port = 3306<br>socket = /private/tmp/mysql.sock</p>
<p>[mysqld]<br>port = 3306<br>socket = /private/tmp/mysql.sockcharacter-set-server = utf8</p>
<p>[mysql]<br>default-character-set = utf8</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 管理]]></title>
      <url>https://pifoo.github.io/2016/08/24/MySQL-%E7%AE%A1%E7%90%86.html</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 查看mysql进程</div><div class="line">ps -ef | grep mysqld</div><div class="line"># or</div><div class="line">top</div><div class="line"></div><div class="line"># 启动 / 重启 / 停止 mysql服务器</div><div class="line">sudo mysql.server start [restart | stop]</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="mysqladmin-命令"><a href="#mysqladmin-命令" class="headerlink" title="mysqladmin 命令"></a>mysqladmin 命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">→ mysqladmin --help</div></pre></td></tr></table></figure>
<h2 id="管理MySQL的命令"><a href="#管理MySQL的命令" class="headerlink" title="管理MySQL的命令"></a>管理MySQL的命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; help;</div></pre></td></tr></table></figure>
<h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g"></a>e.g</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"># 连接数据库</div><div class="line">→ mysql -uroot -p              </div><div class="line"></div><div class="line">#  列出所有数据库</div><div class="line">mysql&gt; SHOW DATABASES;    </div><div class="line"></div><div class="line"># 选择当前数据库    </div><div class="line">mysql&gt; USE 数据库名;          </div><div class="line"></div><div class="line"># 显示当前数据库的所有 数据表          </div><div class="line">mysql&gt; SHOW TABLES;</div><div class="line">mysql&gt; SHOW TABLES;</div><div class="line">+-----------------+</div><div class="line">| Tables_in_test  |</div><div class="line">+-----------------+</div><div class="line">| migrations      |</div><div class="line">| password_resets |</div><div class="line">| users           |</div><div class="line">+-----------------+</div><div class="line"></div><div class="line"># 显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息  </div><div class="line">mysql&gt; SHOW COLUMNS FROM users;</div><div class="line">+----------------+------------------+------+-----+---------+----------------+</div><div class="line">| Field          | Type             | Null | Key | Default | Extra          |</div><div class="line">+----------------+------------------+------+-----+---------+----------------+</div><div class="line">| id             | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</div><div class="line">| name           | varchar(255)     | NO   |     | NULL    |                |</div><div class="line">| email          | varchar(255)     | NO   | UNI | NULL    |                |</div><div class="line">| password       | varchar(255)     | NO   |     | NULL    |                |</div><div class="line">| remember_token | varchar(100)     | YES  |     | NULL    |                |</div><div class="line">| created_at     | timestamp        | YES  |     | NULL    |                |</div><div class="line">| updated_at     | timestamp        | YES  |     | NULL    |                |</div><div class="line">+----------------+------------------+------+-----+---------+----------------+</div><div class="line"></div><div class="line"># 显示 数据表 的详细索引信息</div><div class="line">mysql&gt; SHOW INDEX FROM users;</div><div class="line">+-------+------------+--------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</div><div class="line">| Table | Non_unique | Key_name           | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |</div><div class="line">+-------+------------+--------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</div><div class="line">| users |          0 | PRIMARY            |            1 | id          | A         |           0 |     NULL | NULL   |      | BTREE      |         |               |</div><div class="line">| users |          0 | users_email_unique |            1 | email       | A         |           0 |     NULL | NULL   |      | BTREE      |         |               |</div><div class="line">+-------+------------+--------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</div><div class="line"></div><div class="line"># SHOW TABLE STATUS LIKE [FROM db_name] [LIKE &apos;pattern&apos;] \G</div><div class="line"># 该命令将输出Mysql数据库管理系统的性能及统计信息</div><div class="line"># 1. e.g  # 显示数据库 test 中所有表的信息</div><div class="line">mysql&gt; SHOW TABLE STATUS FROM test;</div><div class="line">+-----------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+-------------+------------+-----------------+----------+----------------+---------+</div><div class="line">| Name            | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time         | Update_time | Check_time | Collation       | Checksum | Create_options | Comment |</div><div class="line">+-----------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+-------------+------------+-----------------+----------+----------------+---------+</div><div class="line">| migrations      | InnoDB |      10 | Dynamic    |    2 |           8192 |       16384 |               0 |            0 |         0 |           NULL | 2016-08-10 15:45:50 | NULL        | NULL       | utf8_unicode_ci |     NULL |                |         |</div><div class="line">| password_resets | InnoDB |      10 | Dynamic    |    0 |              0 |       16384 |               0 |            0 |         0 |           NULL | 2016-08-10 15:45:50 | NULL        | NULL       | utf8_unicode_ci |     NULL |                |         |</div><div class="line">| users           | InnoDB |      10 | Dynamic    |    0 |              0 |       16384 |               0 |            0 |         0 |              1 | 2016-08-10 15:45:50 | NULL        | NULL       | utf8_unicode_ci |     NULL |                |         |</div><div class="line">+-----------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+-------------+------------+-----------------+----------+----------------+---------+</div><div class="line"></div><div class="line"># 2. e.g  表名以migr开头的表的信息</div><div class="line">mysql&gt; SHOW TABLE STATUS FROM test LIKE &apos;migr%&apos;;</div><div class="line">+------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+-------------+------------+-----------------+----------+----------------+---------+</div><div class="line">| Name       | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time         | Update_time | Check_time | Collation       | Checksum | Create_options | Comment |</div><div class="line">+------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+-------------+------------+-----------------+----------+----------------+---------+</div><div class="line">| migrations | InnoDB |      10 | Dynamic    |    2 |           8192 |       16384 |               0 |            0 |         0 |           NULL | 2016-08-10 15:45:50 | NULL        | NULL       | utf8_unicode_ci |     NULL |                |         |</div><div class="line">+------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+-------------+------------+-----------------+----------+----------------+---------+</div><div class="line"></div><div class="line"># 3. e.g  加上 \G，查询结果按列打印</div><div class="line">mysql&gt; SHOW TABLE STATUS FROM test LIKE &apos;migr%&apos;\G;</div><div class="line">*************************** 1. row ***************************</div><div class="line">           Name: migrations</div><div class="line">         Engine: InnoDB</div><div class="line">        Version: 10</div><div class="line">     Row_format: Dynamic</div><div class="line">           Rows: 2</div><div class="line"> Avg_row_length: 8192</div><div class="line">    Data_length: 16384</div><div class="line">Max_data_length: 0</div><div class="line">   Index_length: 0</div><div class="line">      Data_free: 0</div><div class="line"> Auto_increment: NULL</div><div class="line">    Create_time: 2016-08-10 15:45:50</div><div class="line">    Update_time: NULL</div><div class="line">     Check_time: NULL</div><div class="line">      Collation: utf8_unicode_ci</div><div class="line">       Checksum: NULL</div><div class="line"> Create_options:</div><div class="line">        Comment:</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">ERROR:</div><div class="line">No query specified</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6环境搭建(Node & Babel)]]></title>
      <url>https://pifoo.github.io/2016/05/18/ES6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Node-babel.html</url>
      <content type="html"><![CDATA[<p>ECMAScript 6.0（以下简称ES6）是JavaScript语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>
<a id="more"></a>
<h2 id="一、ES6-参考"><a href="#一、ES6-参考" class="headerlink" title="一、ES6 参考"></a>一、ES6 参考</h2><ul>
<li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">http://es6.ruanyifeng.com/</a></li>
<li><a href="https://github.com/tc39/ecma262" target="_blank" rel="external">ECMAScript当前所有提案  Github.com/tc39/ecma262 </a></li>
</ul>
<h2 id="二、支持能力"><a href="#二、支持能力" class="headerlink" title="二、支持能力"></a>二、支持能力</h2><ul>
<li><a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="external">http://kangax.github.io/compat-table/es6/</a></li>
<li><a href="https://github.com/paulmillr/es6-shim" target="_blank" rel="external">https://github.com/paulmillr/es6-shim</a></li>
</ul>
<h2 id="三、运行环境"><a href="#三、运行环境" class="headerlink" title="三、运行环境"></a>三、运行环境</h2><ul>
<li><a href="https://github.com/creationix/nvm" target="_blank" rel="external">https://github.com/creationix/nvm</a></li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></li>
<li><a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a></li>
</ul>
<h2 id="四、特性检测"><a href="#四、特性检测" class="headerlink" title="四、特性检测"></a>四、特性检测</h2><ol>
<li><p>查看Node所有已经实现的ES6特性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ~ node --v8-options | grep harmony</div></pre></td></tr></table></figure>
</li>
<li><p>检查各种运行环境对ES6的支持情况<br><a href="http://ruanyf.github.io/es-checker/" target="_blank" rel="external">es-checker</a>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ~ npm install -g es-checker</div></pre></td></tr></table></figure>
</li>
<li><p>查看本机支持ES6的程度</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ~ es-checker</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="五、Babel转码器"><a href="#五、Babel转码器" class="headerlink" title="五、Babel转码器"></a>五、Babel转码器</h2><ul>
<li><a href="https://babeljs.io/" target="_blank" rel="external">babel 官网</a></li>
<li><a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/zh-Hans/user-handbook.md" target="_blank" rel="external">Babel 用户手册</a></li>
</ul>
<ol>
<li><p>工程初始化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    ➜  ES6 git:(master) ✗ npm init   </div><div class="line">（$ mkdir es2015_demo &amp;&amp; cd es2015_demo &amp;&amp; git init &amp;&amp; npm init）</div></pre></td></tr></table></figure>
</li>
<li><p>本地安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    ➜  ES6 git:(master) ✗ npm install --save-dev babel-cli (建议安装在当前工程目录,非全局)</div><div class="line">    ➜  ES6 git:(master) ✗ npm install babel-preset-stage-0 --save-dev  (ES7)</div><div class="line">/*</div><div class="line">      ➜  ~ npm install -g babel-cli  </div><div class="line">     npm uninstall --global babel-cli</div><div class="line">     */</div></pre></td></tr></table></figure>
</li>
<li><p>转码前后(ES6-&gt;ES5)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//转码前</div><div class="line">[1,2,3].map(n =&gt; console.log(n + 1));</div><div class="line"></div><div class="line">//转码后</div><div class="line">[1, 2, 3].map(function(n) &#123;</div><div class="line">    return console.log(n + 1);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>配置文件.babelrc<br>Babel的配置文件是.babelrc，存放在项目的根目录下(使用Babel的第一步，就是配置这个文件);</p>
<ul>
<li><p>创建 .babelrc</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ES6 git:(master) ✗ touch .babelrc</div></pre></td></tr></table></figure>
</li>
<li><p>.babelrc该文件用来设置转码规则和插件，基本格式如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;presets&quot;: [],</div><div class="line">    &quot;plugins&quot;: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>为presets字段设定转码规则(语法集)，官方提供以下的规则集，可以根据需要安装  </p>
<ul>
<li><p>ES6转码规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-preset-es2015</div></pre></td></tr></table></figure>
</li>
<li><p>react转码规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-preset-react</div></pre></td></tr></table></figure>
</li>
<li><p>ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-preset-stage-0</div><div class="line">$ npm install --save-dev babel-preset-stage-1</div><div class="line">$ npm install --save-dev babel-preset-stage-2</div><div class="line">$ npm install --save-dev babel-preset-stage-3</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>安装转码规则集</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  ES6 git:(master) ✗ npm install --save-dev babel-preset-es2015</div><div class="line">➜  ES6 git:(master) ✗ npm install --save-dev babel-preset-react</div><div class="line">➜  ES6 git:(master) ✗ npm install --save-dev babel-preset-stage-3</div></pre></td></tr></table></figure>
</li>
<li><p>然后，将这些规则加入.babelrc</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;presets&quot;: [</div><div class="line">        &quot;es2015&quot;,</div><div class="line">        &quot;react&quot;,</div><div class="line">        &quot;stage-3&quot;</div><div class="line">    ],</div><div class="line">    &quot;plugins&quot;: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>babel基本用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># 转码结果输出到标准输出</div><div class="line">$ babel example.js</div><div class="line"></div><div class="line"># 转码结果写入一个文件 (--out-file 或 -o 参数指定输出文件)</div><div class="line">$ babel example.js --out-file compiled.js</div><div class="line">或者</div><div class="line">$ babel example.js -o compiled.js</div><div class="line"></div><div class="line"># 整个目录转码 (--out-dir 或 -d 参数指定输出目录)</div><div class="line">$ babel src --out-dir lib</div><div class="line">或者</div><div class="line">$ babel src -d lib</div><div class="line"></div><div class="line"># -s 参数生成source map文件</div><div class="line">$ babel src -d lib -s</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="六、package-json配置"><a href="#六、package-json配置" class="headerlink" title="六、package.json配置"></a>六、package.json配置</h2><ol>
<li><p>工程初始化,生成 package.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ES6 git:(master) ✗ npm init</div></pre></td></tr></table></figure>
</li>
<li><p>改写package.json  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;babel-cli&quot;:&quot;^6.6.5&quot;,</div><div class="line">    &quot;babel-preset-es2015&quot;: &quot;^6.9.0&quot;,</div><div class="line">    &quot;babel-preset-react&quot;: &quot;^6.5.0&quot;,</div><div class="line">    &quot;babel-preset-stage-3&quot;: &quot;^6.5.0&quot;</div><div class="line">&#125;,</div><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;build&quot;: &quot;babel src -d lib&quot;  //将指定目录转码</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
</li>
<li><p>转码执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ES6 git:(master) ✗ npm run build</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="七、babel-之-babel-node"><a href="#七、babel-之-babel-node" class="headerlink" title="七、babel 之 babel-node"></a>七、babel 之 babel-node</h2><p><strong>babel-cli</strong> 工具自带一个 <strong>babel-node</strong> 命令，提供一个支持ES6的REPL环境;</p>
<ol>
<li><p>它支持Node的REPL环境的所有功能，而且可以直接运行ES6代码.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ babel-node</div><div class="line">&gt; (x =&gt; x * 2)(1)</div><div class="line">2</div></pre></td></tr></table></figure>
</li>
<li><p>直接运行脚本文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ babel-node es6.js</div><div class="line">2</div></pre></td></tr></table></figure>
</li>
<li><p>执行脚本命令 运行脚本</p>
<ul>
<li><p>更新package.json:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;build&quot;: &quot;babel src -d lib&quot;,</div><div class="line">    &quot;script&quot;: &quot;babel-node *.js&quot;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
</li>
<li><p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ES6 git:(master) ✗ npm run script</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="八、浏览器环境"><a href="#八、浏览器环境" class="headerlink" title="八、浏览器环境"></a>八、浏览器环境</h2><blockquote>
<p><a href="https://babeljs.io/repl/" target="_blank" rel="external">REPL ES6-&gt;ES5 在线编译器</a></p>
</blockquote>
<h2 id="九、与其他工具的配合"><a href="#九、与其他工具的配合" class="headerlink" title="九、与其他工具的配合"></a>九、与其他工具的配合</h2><p>许多工具需要Babel进行前置转码，这里举两个例子：ESLint 和 Mocha;</p>
<ol>
<li><p>ESLint用于静态检查代码的语法和风格，安装命令如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ES6 git:(master) ✗ npm install --save-dev eslint babel-eslint</div></pre></td></tr></table></figure>
</li>
<li><p>在项目根目录下，新建一个配置文件.eslintrc :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  ES6 git:(master) ✗ touch .eslintrc</div></pre></td></tr></table></figure>
</li>
<li><p>在其中加入parser字段 :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;parser&quot;: &quot;babel-eslint&quot;,</div><div class="line">    &quot;rules&quot;: &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>再在package.json之中，加入相应的 scripts 脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&quot;devDependencies&quot;: &#123;</div><div class="line">    ...</div><div class="line">    &quot;eslint&quot;: &quot;^2.10.2&quot;,</div><div class="line">    &quot;babel-eslint&quot;: &quot;^6.0.4&quot;</div><div class="line">&#125;,</div><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">      ...</div><div class="line">    &quot;eslint&quot;: &quot;eslint my-files.js&quot;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
</li>
<li><p>Mocha则是一个测试框架，如果需要执行使用ES6语法的测试脚本，可以修package.json的scripts.test</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123; &quot;test&quot;: &quot;mocha --ui qunit --compilers js:babel-core/register&quot;&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>上面命令中，–compilers参数指定脚本的转码器，规定后缀名为js的文件，都需要使用babel-core/register先转码;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图解Git]]></title>
      <url>https://pifoo.github.io/2016/03/06/%E5%9B%BE%E8%A7%A3Git.html</url>
      <content type="html"><![CDATA[<h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h2><h3 id="1-1-在工作目录、暂存目录-也叫做索引-和仓库之间复制文件"><a href="#1-1-在工作目录、暂存目录-也叫做索引-和仓库之间复制文件" class="headerlink" title="1.1  在工作目录、暂存目录(也叫做索引)和仓库之间复制文件"></a>1.1  在工作目录、暂存目录(也叫做索引)和仓库之间复制文件</h3><p><img src="http://upload-images.jianshu.io/upload_images/43373-70b0b4603139bc32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在工作目录、暂存目录(也叫做索引)和仓库之间复制文件"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add files                          // 把当前文件放入暂存区域</div><div class="line">git commit                             // 给暂存区域生成快照并提交</div><div class="line">git reset -- files                     // 用来撤销最后一次git add files，你也可以用git reset 撤销所有暂存区域文件</div><div class="line">git checkout -- files                  // 把文件从暂存区域复制到工作目录，用来丢弃本地修改。</div></pre></td></tr></table></figure></p>
<blockquote>
<p>可以用  git reset -p,  git checkout -p, or  git add -p 进入交互模式</p>
</blockquote>
<a id="more"></a>
<h3 id="1-2-跳过暂存区域直接从仓库取出文件或者直接提交代码"><a href="#1-2-跳过暂存区域直接从仓库取出文件或者直接提交代码" class="headerlink" title="1.2   跳过暂存区域直接从仓库取出文件或者直接提交代码"></a>1.2   跳过暂存区域直接从仓库取出文件或者直接提交代码</h3><p><img src="http://upload-images.jianshu.io/upload_images/43373-cb53d8f95d8b524e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="跳过暂存区域直接从仓库取出文件或者直接提交代码"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git commit -a        // 相当于运行 git add 把所有当前目录下的文件加入暂存区域再运行 git commit</div><div class="line"></div><div class="line">git commit *files*   // 进行一次包含最后一次提交加上工作目录中文件快照的提交。并且文件被添加到暂存区域</div><div class="line"></div><div class="line">git checkout HEAD -- *files*  // 回滚到复制最后一次提交</div></pre></td></tr></table></figure></p>
<h3 id="1-3-约定"><a href="#1-3-约定" class="headerlink" title="1.3 约定"></a>1.3 约定</h3><p><img src="http://upload-images.jianshu.io/upload_images/43373-f25252496e8ff50b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="绿色的5位字符表示提交的ID，分别指向父节点。
分支用橘色显示，分别指向特定的提交。
当前分支由附在其上的*HEAD*标识。
 这张图片里显示最后5次提交，*ed489*是最新提交。 
*master*分支指向此次提交，另一个*maint*分支指向祖父提交节点"></p>
<h3 id="1-4-命令详解"><a href="#1-4-命令详解" class="headerlink" title="1.4 命令详解"></a>1.4 命令详解</h3><h4 id="1-4-1-Diff"><a href="#1-4-1-Diff" class="headerlink" title="1.4.1  Diff"></a>1.4.1  Diff</h4><p><img src="http://upload-images.jianshu.io/upload_images/43373-81eecda7391b3232.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看两次提交之间的变动"></p>
<h4 id="1-4-2-Commit"><a href="#1-4-2-Commit" class="headerlink" title="1.4.2  Commit"></a>1.4.2  Commit</h4><p><img src="http://upload-images.jianshu.io/upload_images/43373-ed01d3981e63a3ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提交时，git用暂存区域的文件创建一个新的提交，并把此时的节点设为父节点。
然后把当前分支指向新的提交节点。
上图中，当前分支是*master*。
在运行命令之前，*master*指向*ed489*，
提交后，*master*指向新的节点*f0cec*并以*ed489*作为父节点。"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-09610ae276fed652.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="即便当前分支是某次提交的祖父节点，git会同样操作。
上图中，在*master*分支的祖父节点*maint*分支进行一次提交，生成了*1800b*。
 这样，*maint*分支就不再是*master*分支的祖父节点。此时，[合并](http://marklodato.github.io/visual-git-guide/index-zh-cn.html#merge) (或者 [衍合](http://marklodato.github.io/visual-git-guide/index-zh-cn.html#rebase)) 是必须的"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-3730b691b00a66d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如果想更改一次提交，使用 git commit --amend。
git会使用与当前提交相同的父节点进行一次新提交，旧的提交会被取消"></p>
<h4 id="1-4-3-Checkout"><a href="#1-4-3-Checkout" class="headerlink" title="1.4.3  Checkout"></a>1.4.3  Checkout</h4><blockquote>
<p>checkout命令用于从历史提交（或者暂存区域）中拷贝文件到工作目录，也可用于切换分支</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-89eae14868b8de7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="当给定某个文件名（或者打开-p选项，或者文件名和-p选项同时打开）时，git会从指定的提交中拷贝文件到暂存区域和工作目录。
比如，git checkout HEAD~ foo.c会将提交节点*HEAD~*(即当前提交节点的父节点)中的foo.c复制到工作目录并且加到暂存区域中。
（如果命令中没有指定提交节点，则会从暂存区域中拷贝内容。）注意当前分支不会发生变化。"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-1c6ae3838bf0a625.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="当不指定文件名，而是给出一个（本地）分支时，那么*HEAD*标识会移动到那个分支（也就是说，我们“切换”到那个分支了），
然后暂存区域和工作目录中的内容会和*HEAD*对应的提交节点一致。
新提交节点（下图中的a47c3）中的所有文件都会被复制（到暂存区域和工作目录中）；
只存在于老的提交节点（ed489）中的文件会被删除；
不属于上述两者的文件会被忽略，不受影响。"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-2404e9e800c05d95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如果既没有指定文件名，也没有指定分支名，而是一个标签、远程分支、SHA-1值或者是像*master~3*类似的东西，就得到一个匿名分支，称作*detached HEAD*（被分离的*HEAD*标识）。
这样可以很方便地在历史版本之间互相切换。
比如说你想要编译1.6.6.1版本的git，你可以运行git checkout v1.6.6.1
（这是一个标签，而非分支名），编译，安装，然后切换回另一个分支，比如说git checkout master。
然而，当提交操作涉及到“分离的HEAD”时，其行为会略有不同，详情见在下面。"></p>
<p>HEAD标识处于分离状态时的提交操作<br><img src="http://upload-images.jianshu.io/upload_images/43373-9428301c69c4a586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="当*HEAD*处于分离状态（不依附于任一分支）时，提交操作可以正常进行，但是不会更新任何已命名的分支。
(你可以认为这是在更新一个匿名分支。)"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-b04ac6336c5b9576.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一旦此后你切换到别的分支，比如说*master*，那么这个提交节点（可能）再也不会被引用到，然后就会被丢弃掉了。
注意这个命令之后就不会有东西引用*2eecb*。"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-bb6aa40285a81616.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="但是，如果你想保存这个状态，可以用命令git checkout -b *name*
来创建一个新的分支"></p>
<h4 id="1-4-4-Reset"><a href="#1-4-4-Reset" class="headerlink" title="1.4.4  Reset"></a>1.4.4  Reset</h4><p>reset命令把当前分支指向另一个位置，并且有选择的变动工作目录和索引。也用来在从历史仓库中复制文件到索引，而不动工作目录。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-7f974bb39a3d5e96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如果不给选项，那么当前分支指向到那个提交。如果用--hard
选项，那么工作目录也更新，如果用--soft
选项，那么都不变"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-c3813b4f8368ac02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如果没有给出提交点的版本号，那么默认用*HEAD*。
这样，分支指向不变，但是索引会回滚到最后一次提交，如果用--hard
选项，工作目录也同样"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-6496a6a41cb426aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如果给了文件名(或者 -p选项), 那么工作效果和带文件名的[checkout](http://marklodato.github.io/visual-git-guide/index-zh-cn.html#checkout)差不多，除了索引被更新"></p>
<h4 id="1-4-5-Merge"><a href="#1-4-5-Merge" class="headerlink" title="1.4.5  Merge"></a>1.4.5  Merge</h4><p><img src="http://upload-images.jianshu.io/upload_images/43373-04e387821ba70a0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="merge 命令把不同分支合并起来。
合并前，索引必须和当前提交相同。
如果另一个分支是当前提交的祖父节点，那么合并命令将什么也不做。
 另一种情况是如果当前提交是另一个分支的祖父节点，就导致*fast-forward*合并。
指向只是简单的移动，并生成一个新的提交"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-f6b70a0d12da8c19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="否则就是一次真正的合并。
默认把当前提交(*ed489* 如下所示)和另一个提交(*33104*)以及他们的共同祖父节点(*b325c*)进行一次[三方合并](http://en.wikipedia.org/wiki/Three-way_merge)。
结果是先保存当前目录和索引，然后和父节点*33104*一起做一次新提交"></p>
<h4 id="1-4-6-Cherry-Pick"><a href="#1-4-6-Cherry-Pick" class="headerlink" title="1.4.6 Cherry Pick"></a>1.4.6 Cherry Pick</h4><p><img src="http://upload-images.jianshu.io/upload_images/43373-59b9b8ecddf97038.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cherry-pick命令&quot;复制&quot;一个提交节点并在当前分支做一次完全一样的新提交"></p>
<h4 id="1-4-7-Rebase"><a href="#1-4-7-Rebase" class="headerlink" title="1.4.7 Rebase"></a>1.4.7 Rebase</h4><p><img src="http://upload-images.jianshu.io/upload_images/43373-0648dda3ae7813dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="衍合是合并命令的另一种选择。
合并把两个父分支合并进行一次提交，提交历史不是线性的。
衍合在当前分支上重演另一个分支的历史，提交历史是线性的。
本质上，这是线性化的自动的.
 [cherry-pick](http://marklodato.github.io/visual-git-guide/index-zh-cn.html#cherry-pick)
上面的命令都在*topic*分支中进行，而不是*master*分支，在*master*分支上重演，并且把分支指向新的节点。
注意旧提交没有被引用，将被回收。"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-b2f907ca98d96ffd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="要限制回滚范围，使用--onto
选项。上面的命令在*master*分支上重演当前分支从*169a6*以来的最近几个提交，即*2c33a*；
同样有git rebase --interactive
让你更方便的完成一些复杂操作，比如丢弃、重排、修改、合并提交"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<p><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="external">图解Git</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 起步]]></title>
      <url>https://pifoo.github.io/2016/03/04/Git-%E8%B5%B7%E6%AD%A5.html</url>
      <content type="html"><![CDATA[<h2 id="认识Git"><a href="#认识Git" class="headerlink" title="认识Git"></a>认识Git</h2><table>
<thead>
<tr>
<th style="text-align:left">VCS分类</th>
<th style="text-align:left">特点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">本地VCS</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">集中式VCS</td>
<td style="text-align:left">都有一个单一的集中管理的服务器，协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新</td>
</tr>
<tr>
<td style="text-align:left">分布式VCS</td>
<td style="text-align:left">每一次的克隆操作，实际上都是一次对代码仓库的完整备份；</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-4ec402bf26e03e80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="本地VCS "></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-6959183f74892eeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="集中式VCS"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-346d02f870e050f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分布式VCS"></p>
<blockquote>
<p>Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方法,<br>概念上来区分，其它大部分系统以文件变更列表的方式存储信息。 这类系统（CVS、Subversion、Perforce、Bazaar 等等）将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异</p>
</blockquote>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install git</div></pre></td></tr></table></figure>
<h2 id="配置环境-及-身份信息"><a href="#配置环境-及-身份信息" class="headerlink" title="配置环境 及 身份信息"></a>配置环境 及 身份信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">1. 配置环境</div><div class="line">Git 自带一个 git config的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置(每一个级别覆盖上一级别的配置)</div><div class="line">- 1.1  /etc/gitconfig文件:</div><div class="line">包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system选项的 git config 时，它会从此文件读写配置变量。</div><div class="line">- 1.2  ~/.gitconfig 或 ~/.config/git/config文件：</div><div class="line">只针对当前用户。 可以传递 --global选项让 Git 读写此文件。</div><div class="line">- 1.3  .git/config</div><div class="line">当前使用仓库的 Git 目录中的 config文件：针对该仓库。</div><div class="line"></div><div class="line">2. 配置身份</div><div class="line">➜  git config --global user.name &quot;pifoo&quot;</div><div class="line">➜  git config --global user.email &quot;pifoo@icloud.com&quot;</div><div class="line">查看：</div><div class="line">➜  git config --global user.email</div><div class="line">pifoo@icloud.com</div><div class="line">➜  git config --global user.name</div><div class="line">pifoo</div></pre></td></tr></table></figure>
<p>3  检查配置信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --list      //  命令来列出所有 Git 当时能找到的配置</div><div class="line">git config user.name   // 来检查 Git 的某一项配置</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">git-scm.com/book/zh/v2</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Laravel 5.x 环境配置]]></title>
      <url>https://pifoo.github.io/2015/05/06/Laravel-5-x-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</url>
      <content type="html"><![CDATA[<h2 id="Laravel-环境配置-启动服务的4种方式"><a href="#Laravel-环境配置-启动服务的4种方式" class="headerlink" title="Laravel 环境配置,启动服务的4种方式"></a>Laravel 环境配置,启动服务的4种方式</h2><blockquote>
<ol>
<li>php内置服务器: php -S localhost:8999 -t public</li>
<li>→ php artisan serve    </li>
<li>使用Homestead  </li>
<li>使用valet *    #本文采用此方式</li>
</ol>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 本机环境</div><div class="line">Distro: OS X 10.11.5</div><div class="line">Shell: /bin/zsh</div></pre></td></tr></table></figure>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>安装 composer</li>
<li>composer安装laraverl</li>
<li>php artisan 和 php内置服务器的初步使用….</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">➜  ~ brew install composer</div><div class="line">➜  ~ composer --version  // laraverl安装</div><div class="line">Composer version 1.2.0</div><div class="line">➜  ~ laravel -V</div><div class="line">Laravel Installer version 1.3.3</div><div class="line">➜  ~ valet -V</div><div class="line">Laravel Valet version 1.1.12</div></pre></td></tr></table></figure>
<h2 id="生成项目"><a href="#生成项目" class="headerlink" title="生成项目"></a>生成项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  ~ mkcd laravel5</div><div class="line"># e.g 1</div><div class="line">➜  ~ composer create-project laravel/laravel Laravel5</div><div class="line"># e.g 2</div><div class="line">➜  ~ laravel new Laravel5</div></pre></td></tr></table></figure>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">locate mysql.sock</div><div class="line"></div><div class="line">→ sudo find / -name mysql.sock</div><div class="line"># touch /usr/local/etc/my.cnf</div><div class="line">[client]</div><div class="line">port = 3306</div><div class="line">socket = /private/tmp/mysql.sock</div><div class="line"></div><div class="line">[mysqld]</div><div class="line">port = 3306</div><div class="line">socket = /private/tmp/mysql.sock</div><div class="line">character-set-server = utf8</div><div class="line"></div><div class="line">[mysql]</div><div class="line">default-character-set = utf8</div><div class="line"></div><div class="line"></div><div class="line"># 1. 数据库安装</div><div class="line">→ brew install mysql  </div><div class="line">→ brew info mysql</div><div class="line">→ mysql_secure_installation</div><div class="line"></div><div class="line"># 2. 运行mysql</div><div class="line">// → brew services start mysql    // 可以在后台运行</div><div class="line">→ rm /private/tmp/mysql.sock.lock    </div><div class="line">→ mv /private/tmp/mysql.sock.lock ~/del-rm</div><div class="line">→ mysql.server start | stop | restart   //**...........</div><div class="line"></div><div class="line"># 3. 登陆 mysql</div><div class="line">//→ brew services list</div><div class="line">→ mysql -uroot -p</div><div class="line">→ mysql&gt; SHOW DATABASES; ( *创建数据库-&gt;...-&gt;... )</div><div class="line">+--------------------+</div><div class="line">| Database           |</div><div class="line">+--------------------+</div><div class="line">| information_schema |</div><div class="line">| laravel5_db        |</div><div class="line">| mysql              |</div><div class="line">| performance_schema |</div><div class="line">| sys                |</div><div class="line">| test               |</div><div class="line">+--------------------+</div></pre></td></tr></table></figure>
<h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># ——————————————————————————————  </div><div class="line">→ mysql.server start</div><div class="line">#  ERROR! The server quit without updating PID file (/usr/local/var/mysql/MacBookPro.local.pid).     </div><div class="line">解决方法：→ rm /private/tmp/mysql.sock.lock</div><div class="line"># ——————————————————————————————               </div><div class="line">→ rm  /usr/local/var/mysql/MacBookPro.local.err</div><div class="line">→ sudo chown -R _mysql:mysql /usr/local/var/mysql</div><div class="line">→ chmod -R 777 /usr/local/var/mysql/MacBookPro.pid    //  &lt;&lt;   -rw-r---</div><div class="line"></div><div class="line">→ sudo chmod 777 /private/tmp</div><div class="line">→ rm mysql.sock.lock **********************</div><div class="line"># pifoo at MacBookPro.local in /private/tmp [16:18:13]</div><div class="line">→ sudo mysql.server start</div><div class="line">Starting MySQL</div><div class="line">. SUCCESS!</div><div class="line"></div><div class="line"># pifoo at MacBookPro.local in /private/tmp [16:18:19]</div><div class="line">→ sudo mysql.server stop</div><div class="line">Shutting down MySQL</div><div class="line">.. SUCCESS!</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<p><a href="https://packagist.org/" target="_blank" rel="external">Packagist-The PHP Package Repository</a><br><a href="https://getcomposer.org/" target="_blank" rel="external">Dependency Manager for PHP</a><br><a href="http://www.phpcomposer.com/" target="_blank" rel="external">Dependency Manager for PHP/zh-cn</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅显易懂的Git教程]]></title>
      <url>https://pifoo.github.io/2015/03/05/%E6%B5%85%E6%98%BE%E6%98%93%E6%87%82%E7%9A%84Git%E6%95%99%E7%A8%8B.html</url>
      <content type="html"><![CDATA[<h2 id="1-认识Git"><a href="#1-认识Git" class="headerlink" title="1. 认识Git"></a>1. 认识Git</h2><p>一个分布式的版本控制系统</p>
<a id="more"></a>
<h2 id="2-仓库初始化"><a href="#2-仓库初始化" class="headerlink" title="2. 仓库初始化"></a>2. 仓库初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 1. 工程目录</div><div class="line">➜  GitAction:  pwd</div><div class="line">/Users/.../GitAction</div><div class="line"></div><div class="line">// 2. 创建新仓库</div><div class="line">➜  GitAction: git init                                           // 初始化仓库(本地)</div><div class="line"></div><div class="line">// 2. 检出仓库</div><div class="line">➜  GitAction: git clone  pathURL/to/repository  [fileName]       // 创建一个仓库的克隆版本(远程or本地)</div></pre></td></tr></table></figure>
<h2 id="3-Git工作流"><a href="#3-Git工作流" class="headerlink" title="3. Git工作流"></a>3. Git工作流</h2><p>本地仓库由 git 维护的三棵“树”组成</p>
<blockquote>
<ol>
<li>工作目录，它持有实际文件；</li>
<li>暂存区（Index），它像个缓存区域，临时保存你的改动；</li>
<li>HEAD，它指向你最后一次提交的结果；</li>
</ol>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-5def84572dbd59f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Git工作流"></p>
<h2 id="4-添加和提交"><a href="#4-添加和提交" class="headerlink" title="4. 添加和提交"></a>4. 添加和提交</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 1. 添加[改动]到暂存区</div><div class="line">➜  git add &lt;filename&gt;</div><div class="line">➜  git add *</div><div class="line"></div><div class="line">// 2. 提交实际改动：</div><div class="line">➜  git commit -m &quot;代码变更说明&quot;    // 至此，代码已提交到HEAD,但还未提交至远程仓库</div></pre></td></tr></table></figure>
<h2 id="5-推送改动"><a href="#5-推送改动" class="headerlink" title="5. 推送改动"></a>5. 推送改动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 1.  将本地仓库连接到某个远程服务器</div><div class="line">➜  git remote add origin &lt;server&gt;</div><div class="line">// 2. 提交到远端仓库</div><div class="line">➜  git push [-u] origin master       // 可以把 master 换成你想要推送的任何分支;   [-u] 空仓库初次提交</div></pre></td></tr></table></figure>
<h2 id="6-分支"><a href="#6-分支" class="headerlink" title="6. 分支"></a>6. 分支</h2><blockquote>
<p>分支是用来将特性开发绝缘开来的；<br>在你创建仓库的时候，<em>master</em> 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-922062d774dee2a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分支"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 创建一个叫做“feature_x”的分支，并切换过去：</div><div class="line">➜  git checkout -b feature_x</div><div class="line"></div><div class="line">// 切换回主分支：</div><div class="line">➜  git checkout master</div><div class="line"></div><div class="line">// 再把新建的分支删掉：</div><div class="line">➜  git branch -d feature_x</div><div class="line"></div><div class="line">// 除非你将分支推送到远端仓库，不然该分支就是 *不为他人所见的*：</div><div class="line">➜  git push origin &lt;branch&gt;</div></pre></td></tr></table></figure>
<h2 id="7-更新与合并"><a href="#7-更新与合并" class="headerlink" title="7. 更新与合并"></a>7. 更新与合并</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 更新最新改动至本地仓库，执行：</div><div class="line">➜  git pull</div><div class="line"></div><div class="line">// e.g 在当前工作目录中 获取（fetch） 并 合并（merge）远端的改动</div><div class="line">// 合并其他分支到当前分支（例如 master），执行：</div><div class="line">➜  git merge &lt;branch&gt;</div><div class="line">// git 会尝试去自动合并改动</div><div class="line">// 可能出现冲突（conflicts）， 这时需要修改并合并这些冲突（conflicts）；</div><div class="line">// 改完之后，执行如下命令以将它们标记为合并成功：</div><div class="line">➜  git add &lt;filename&gt;</div><div class="line"></div><div class="line">// 在合并改动之前，可以使用如下命令预览差异：</div><div class="line">➜  git diff &lt;source_branch&gt; &lt;target_branch&gt;</div></pre></td></tr></table></figure>
<h2 id="8-标签"><a href="#8-标签" class="headerlink" title="8. 标签"></a>8. 标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 执行如下命令为指定提交版本创建一个叫做 *1.0.0* 的标签：</div><div class="line">➜  git tag 1.0.0 1b2e1d63ff            // *1b2e1d63ff* 每次提交时的 ID标记 前 10 位字符</div><div class="line"></div><div class="line">// 获取提交 ID：</div><div class="line">➜  git log</div></pre></td></tr></table></figure>
<h2 id="9-替换本地改动"><a href="#9-替换本地改动" class="headerlink" title="9. 替换本地改动"></a>9. 替换本地改动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 用HEAD 中的最新内容替换掉工作目录中的文件</div><div class="line">➜  git checkout -- &lt;filename&gt;       // 已添加到暂存区的改动以及新文件都不会受到影响</div><div class="line"></div><div class="line">// 丢弃你在本地的所有改动与提交，到服务器上获取最新的版本历史，并将本地主分支指向它：</div><div class="line">➜  git fetch origin</div><div class="line">➜  git reset --hard origin/master</div></pre></td></tr></table></figure>
<h2 id="10-实用小贴士"><a href="#10-实用小贴士" class="headerlink" title="10. 实用小贴士"></a>10. 实用小贴士</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">内建的图形化 git：gitk</div><div class="line"></div><div class="line">// 彩色的 git 输出：</div><div class="line">git config color.ui true</div><div class="line"></div><div class="line">// 显示历史记录时，每个提交的信息只显示一行：</div><div class="line">git config format.pretty oneline</div><div class="line"></div><div class="line">// 交互式添加文件到暂存区：</div><div class="line">git add -i</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<p> <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external"> Git教程 - <a href="http://www.liaoxuefeng.com/" target="_blank" rel="external">廖雪峰</a>出品</a><br><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">git fast-version-control</a><br><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">git简明教程</a><br><a href="http://learngitbranching.js.org" target="_blank" rel="external">在线可视化Git演练</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 基础]]></title>
      <url>https://pifoo.github.io/2015/03/02/Git-%E5%9F%BA%E7%A1%80.html</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$ git init    // 在现在目录下初始化仓库</div><div class="line"></div><div class="line">$ git add *.c    // 提交变更到暂存区（开始跟踪文件） , 理解为：添加内容到下一次提交中</div><div class="line"></div><div class="line">$ git add LICENSE</div><div class="line"></div><div class="line">$ git commit -m &apos;initial project version&apos;   // 提交至仓库</div><div class="line"></div><div class="line">$ git clone https://github.com/libgit2/libgit2 mylibgit   // clone现在有仓库并重命名</div><div class="line"></div><div class="line">$ git status   // 查看文件 状态</div><div class="line"></div><div class="line">$ git status -s // 状态简览</div><div class="line"></div><div class="line">$ git diff  // 显示尚未暂存的改动(查看已暂存 和 暂存的修改) ，比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容</div><div class="line"></div><div class="line">$ git diff --staged    // 查看已暂存的将要添加到下次提交里的内容</div><div class="line"></div><div class="line">$ git commit -a -m &apos;added new benchmarks&apos;   // 跳过使用暂存区域的方式(跳过 git add)</div><div class="line"></div><div class="line">$ git rm  // 从暂存区域移除然后提交,并连带从工作目录中删除指定的文件, 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母）</div><div class="line"></div><div class="line">$ git rm --cached README  // Git 不再继续跟踪（文件仍保留在工作目录中）</div><div class="line"></div><div class="line">$ git rm log/\*.log   // 模式匹配，删除 log/目录下扩展名为 .log的所有文件</div><div class="line"></div><div class="line">$ git mv CONTRIBUTING.md   con.md   // 移动/重命名(同目录下)</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/43373-00532394bb05f3dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="状态简览"></p>
<p>忽略文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 创建一个名为.gitignore的文件，列出要忽略的文件模式</div><div class="line">$ touch  .gitignore</div></pre></td></tr></table></figure></p>
<blockquote>
<p>*.[oa]           # 忽略所有以 .o或 .a结尾的文件<br>*~                    # 忽略所有以波浪符（~）结尾的文件</p>
</blockquote>
<p>TIP</p>
<blockquote>
<p>GitHub 有一个十分详细的针对数十种项目及语言的 .gitignore文件列表，你可以在<a href="https://github.com/github/gitignore" target="_blank" rel="external"><em>https://github.com/github/gitignore</em></a> </p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
